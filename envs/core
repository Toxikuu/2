# core
#
# The core environment defines core functions and variables

#####################################
# With
#####################################

# with lets you use other build abstractions
with() {
    export -f with
    for f in "$@"; do
        file="/usr/share/2/envs/${f}"
        if test -f "${file}"; then
            # shellcheck disable=SC1090
            source "${file}"
        else
            echo "Could not source ${file}" >&2
            return 1
        fi
    done
}

#####################################
# Generic Environment Variables
#####################################

# shellcheck disable=SC2155
export MAKEFLAGS="-j$(nproc)"
export FFLAGS="-O2"
export LDFLAGS="-Wl,--as-needed"
export PATH="/usr/bin:/usr/sbin"

#####################################
# Communication Functions
#####################################

die() {
    export -f die
    echo -e "\x1b[31;1mDeath: '$1'\x1b[0m" >&2
    exit 1
}

msg() {
    export -f msg
    echo -e "\x1b[34;1m$1\x1b[0m"
}

warn() {
    export -f warn
    local width=80

    echo -e "\x1b[31;1m ### WARNING ###\x1b[0m"           >&2
    echo -e "\x1b[31;1m$1\x1b[0m" | fold -s -w "${width}" >&2
    echo -e "\x1b[31;1m ### WARNING ###\x1b[0m"           >&2
}

confirm() {
    export -f confirm
    local default="${2:-n}"
    local prompt="${1:-Are you sure?}"

    default="${default,,}" # lowercase

    if [[ "${default}" == "y" ]]; then
        prompt+=" [Y/n] "
    else
        prompt+=" [y/N] "
    fi

    while true; do
        read -r -p "${prompt}" ans
        ans=${ans,,}

        [[ -z "${ans}" ]] && ans="${default}"

        case "${ans}" in
            y|yes) return 0 ;;
            n|no) return 1 ;;
            *) echo "Please answer yes or no" >&2 ;;
        esac
    done
}

#####################################
# Standard Build Functions
#####################################

tpatch() {
    patch --verbose -Np1 -i "$@" ||
    die "Patch failed"
}

cfg() {
    set +x
    export -f cfg
    CP="${CP:-.}"

    # shellcheck disable=SC2154
    # to disable disable-static, set DONT_DISABLE_STATIC=true or =1
    if [[ "${DONT_DISABLE_STATIC}" == "true" || "${DONT_DISABLE_STATIC}" == "1" ]]; then
        unset DS
    else
        DS="--disable-static"
    fi

    unset DONT_DISABLE_STATIC

    if [[ -z "${m32}" ]]; then
        echo "Building for m64..." >&2

        # shellcheck disable=SC2248,SC2250
        CC="${CC:-gcc}"    \
        CXX="${CXX:-g++}"  \
        CFLAGS="${CFLAGS:--O2 -march=native -pipe}"      \
        CXXFLAGS="${CXXFLAGS:--O2 -march=native -pipe}"  \
        "${CP}/configure" --prefix=/usr $DS "$@" ||
        die "Configure failed"
    else
        echo "Building for m32..." >&2

        # shellcheck disable=SC2248,SC2250
        CC="${CC:-gcc -m32}"    \
        CXX="${CXX:-g++ -m32}"  \
        CFLAGS="${CFLAGS:--O2 -L/usr/lib32 -march=i686 -pipe}"      \
        CXXFLAGS="${CXXFLAGS:--O2 -L/usr/lib32 -march=i686 -pipe}"  \
        PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-/usr/lib32/pkgconfig}"  \
        "${CP}/configure" --prefix=/usr \
            --libdir=/usr/lib32         \
            --host=i686-pc-linux-gnu    \
            $DS "$@" ||
        die "Configure (m32) failed"
    fi
}

mk() {
    export -f mk
    make "$@" || die "Make failed"
}

copy_over_m32_libs() {
    if   [[ -e "${BLD}/32DEST/usr/lib32" ]]; then
        mkdir -pv "${D}/usr/lib32"
        cp -av "${BLD}/32DEST/usr/lib32/"* "${D}/usr/lib32"
    elif [[ -e "${BLD}/32DEST/lib32"     ]]; then
        mkdir -pv "${D}/lib32"
        cp -av "${BLD}/32DEST/lib32/"*     "${D}/lib32"
    elif [[ -e "${BLD}/32DEST/usr/lib"   ]]; then
        mkdir -pv "${D}/usr/lib32" 
        cp -av "${BLD}/32DEST/usr/lib/"*   "${D}/usr/lib32"
    elif [[ -e "${BLD}/32DEST/lib"       ]]; then
        mkdir -pv "${D}/lib32"
        cp -av "${BLD}/32DEST/lib/"*       "${D}/lib32"
    else
        echo "Didn't copy over any m32 libs!" >&2
    fi
}

mi() {
    export -f mi
    if [[ -z "${m32}" ]]; then
        # shellcheck disable=SC2154
        make DESTDIR="${D}" "$@" install || die "Make install failed"
    else
        # shellcheck disable=SC2154
        make DESTDIR="${BLD}/32DEST" "$@" install || die "Make install (m32) failed"
        copy_over_m32_libs
    fi
}

#####################################
# Path Utilities
#####################################

pathremove () {
  export -f pathremove
  local IFS=':'
  local NEWPATH
  local DIR
  local PATHVARIABLE="${2:-PATH}"

  for DIR in ${!PATHVARIABLE} ; do
    if [[ "${DIR}" != "$1" ]] ; then
      NEWPATH=${NEWPATH:+${NEWPATH}:}${DIR}
    fi
  done

  export "${PATHVARIABLE}"="${NEWPATH}"
}

pathprepend () {
  export -f pathprepend
  pathremove "$1" "$2"
  local PATHVARIABLE="${2:-PATH}"
  export "${PATHVARIABLE}"="$1${!PATHVARIABLE:+:${!PATHVARIABLE}}"
}

pathappend () {
  export -f pathappend
  pathremove "$1" "$2"
  local PATHVARIABLE="${2:-PATH}"
  export "${PATHVARIABLE}"="${!PATHVARIABLE:+${!PATHVARIABLE}:}$1"
}
