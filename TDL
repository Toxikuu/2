# Project: 2/two

TODO

    Rework listing ui
    Include dependencies in package struct and long about

WIP

    Complete 2lkit functionality
        # Add downgrade
        #     restore's been added, but I might also add a simple downgrade
        #     Dropped as update works fine and is used in 2
        [*] Add view
        [-] The error handling isn't user friendly but it's fine
        [*] Add Package::from(MaintArg)
        [-] Add QA checks and basic linting
        [*] Add `--new-repo` # this i should do before 0.1.0 since it's referenced in the documentation
        Won't make it into 0.1.0 most likely
        Ultimately, this should become part of a workspace with 2

    Expand the main & xorg repos
        Categorize more packages
        Drop m32 support in the future
            Once I get flatpak working and test steam with it

DONEISH

    Work on mdbook docs
        Just read through and polish some stuff

    Add full output for --prune

    Consolidate logging and vpr/msg/erm
        Would also probably be a good idea to transition to tracing
        Also improve logs

    Move /usr/ports to /var/ports

    Improve error messages by using with_context(|| format!(...))
        Ideally I'd have something like this but for Fail
        Used efail

    Implement long about
        Long about should include everything about does, as well as other fields:
            [*] port_dir
            [*] dist tarball
            [*] category
            [-] license (in the future)
            [-] dependencies (in the future)
            TODO ^

    Make the env scripts recognize 32DEST/usr/lib as a fallback if 32DEST/usr/lib32 doesn't exist
        Also simplify the logic from packages accordingly:
            libvdpau-va-gl
            zstd
            (possibly others) # i haven't found the others if they exist

    Move pkg.log to build.log and don't do any attach/detach shenanigans

    Consolidate all dotdir creation to be handled in a function called in package::parse

    Allow shortened repo addition
        This could be expanded to allow hosts other than github in the future, but we'll cross that bridge when we get there

    Make master.log transient
        Now exists at /tmp/2/master.log to be wiped on reboot

    Fix the weird upstream OOM bug
        Ofc it was caused by string formatting

    Use Option for upstream

    Allow more escape code variants in package formatting in config.toml

    Add a qa check to ensure stuff was installed to $D when building
        Rewrite the qa checks in not bash

    Consider adding package categories
        Some of these categories will raise warnings
            I'm thinking one for critical packages
            Would warn the user about removing glibc for instance

    Add a qa check to ensure no 64bit libraries found their way into $D/usr/lib32

    Check modtime on info.lock whenever --build is called
        Also store the modtime somewhere
        Would be stored in .data/STATS
        I gotta make .data/STATS
            This is technically done but its kinda cursed and i should really just use releases

    Make -S sync all repos if no arguments were passed

    Use pedantic shellcheck options
        As with clippy, to ensure code quality

    Serialize more metadata into package locks
        Also consider renaming info.lock to LOCK

    Add package types
        Need to add critical so i dont remove glibc (again)

    Migrate repos to new build api

    Work on the releases script

    Make -L show the master log if no arguments were passed

    Use an inherit-esque system instead of *-* scripts
        Add a script called 'with' which sources files in a specific directory
        These files contain functions for a specific build system or task
        Finish writing the env files

    Make -U expand to //@@ if no arguments were passed

    Move flag explanations out of packages/ and into flags/
        Also covered all of the flags

    Add a configure option for whether dist tarballs should be deleted
        Ended up removing remove_dots as well

    Add an option to toggle alphebitization when listing

    Move the @all alias to @@
        Also add @available and alias it to @a

    Add force pruning

    Rename comms/log.rs to comms/out.rs for clarity

    Figure out how to make the message configs have the full escape code in the config for clarity
        Done
        I had to use \u00 instead of \x

    Do hash-checks in house instead of relying on openssl

    Make cleaning hesitant to remove manifests
        Also went ahead and refactored the relevant functions

    Investigate a potential bug where -fbi builds twice

    Attempt to update instead of installing if -i is passed, the package is already installed, and it's outdated
        Im like 80% sure i did this cus the codes there but idr if i fully implemented it LOL
        Update: it feels like it mostly works, so im up to 90% sure, but ima have to test this some more <<< TODO: Verify

    Have the execution logic as a PM method
        Also pass args to it
        This is to address the `2 -bi dependency package` issue
        Iterate over each package, checking the flags

    Add a way to specify repo when dealing with sets
        I'm thinking assume all repos unless repo/ is specified (for special sets)
            (I ended up just assuming the highest priority repo for special sets, opting for //@special instead)
        otherwise resolve ambiguity

    Use more nf icons

    Make the downloads actually happen at the start

    Add sets for installed, outdated, etc

    Migrate from lazy_static to once_cell for everything
        Used std::sync::LazyLock instead

    Allow viewing package changelogs with -H

    Make -U show the repo as well as the package name
        cus
            main/kernel
            tox/kernel

    // fucking hell i was tired :sob:
    Fix the fucking the thing the parallel dowlnoads fuck im tired
        make the downloads happen at the start but not like in parallel because every fucking crate author is allergic to writing good documentation with examples of how to use the fucking library
        also it would make logging a lot simpler

    Fix upstream version commands for xorg/

    Rayon support for -U is badly needed

    Update to ureq 3

    Fix upstream version commands for main/

    Move .uv.toml data back into info.lock and BUILD, simplifying stuff
    Add upstream version checking

    Add per package history tracking
        Add autogenerated via scripts changelogs for package builds

    Added m-move

    Updated m-*

    Figure out how to make documentation not show in --help as it currently does

    Add --provides (-P) to see what package provides a certain file via searching manifests

    Add more (source code) documentation

    Use anyhow

    Add log4rs or tracing integration (ideally only log to a file)

    Make -l list all packages for all repos

    Use Arc instead of Vec

    Add logs
        Master log in /var/log/2/master.log
        Per-package build logs in /usr/ports/<repo>/<package>/.logs/build.log

    Add syncing

    Add repo addition

    Remove exclusions from the config.toml

    Add repo priority and auto_ambiguity

    Fix sourceless package support

    Make file size update dynamically for unknown sizes

    Make the scripts recognize $EDITOR
        Scripts were migrated to 2lkit

    Check if the necessary dot dirs exist for the passed package, and create them
        Would ensure cleaning works properly on first builds

    Remove all references to /code

    Fix bugs in install.sh
        Rustup toolchain handling
        no op for the currently nonexistent wget command
        fix /bin/2

    Check whether another package is installed before checking against its manifest when removing a specific package

    Fix set ambiguity

    Update the README

    Add an install.sh

    Migrate to using $D

    Add an option to exclude paths from the extraction

    Actually implement pruning

    Check source hashes during the setup stage

    Migrate build to /usr/ports/<repo>/<package>/.build

    Migrate sources to /usr/ports/<repo>/<package>/.sources

    Prefer ambiguity checks over verbose repo specification

    Add listing functionality

    Test package installation

    Add manifest checking and logic for package removal

    Add source fetching

DROPPED

    Use indicatif's pb.println() for building logs
        Would be a collosal pain in the ass
        But would look nice
        This would just be too painful

    Test install.sh
        Focus on Makefile instead

    Add -! to reverse the behavior of (some) flags
        ~~For instance, -P shows what packages provide a file, but -!P might show what files a package provides~~
        Would be unintuitive and overly complex

    Look into using --dereference with tar
        It is harmful, as it does not package symlinks

    Use the zstd crate, or else vendor my own built zstd libraries
        Imo just keep the runtime dependency, but explain in docs how to bootstrap it

IDEAS

    Add a testing and unstable repo
        testing/ should basically never be used by an end user, and will function as a testing ground for new packages
        unstable/ should contain packages moved out of testing
        Packages from unstable/ should be moved to main/ or xorg/

    More API calls for BUILD files
        STRIP=<level> (symbols, debug, all)
        CONFLICTS=("package1", "package2")
        LICENSE=("license", "license2")
        SHARE_SOURCE=("package1", "package2")
        KCFG=("NAMESPACES=*", "USER_NS=*/M") # example kernel config options required for steam

    Build functions in LOCK
        This should be doable with declare -f, though I'm not certain it's desirable
        Imo this is not desirable

    Build time tracking
        https://pad.riseup.net/p/buildtimetracking-keep

    BUILD instruction guessing
        https://pad.riseup.net/p/buildinstructionguessing-keep

    Add a file for enabled repos
        This would mean not having to delete source tarballs, logs, and data when "removing" a repo
        Make it configurable

    Introduce /etc/2/sysconfig.toml
        Centralized location for configuring certain system-specific options
        Would make the installation of certain packages just a little less painful, but may not be worth it idk

    Consider using cfg_if

    Consider writing to a .part to avoid the possibility of incomplete tarballs because of an interrupted download
        Planned for 0.2.0

    Rayon everywhere
        There's a fair bit of overhead with doing this
        Async might be the play

    Dependencies support with a flag '-d' or similar
        Implies dependency resolution as well
        Planned for 0.2.0
        Should also have a way to break circular dependencies

    Check hashes for dist installs as well
        Would marginally increase security and more than marginally increase complexity

    Add git as a supported source format
        Syntax: source variable starts with git+
        Add PackageSource struct
        Repo is cloned to .sources/<name>
        If the sourcetype for a package is git, --clean should execute `git reset --hard`
        If it exists, the repo is pulled instead
        Optional syntactic sugar to check out to a specific tag
        Build is done in .build as usual

    Do the zstd compression in-house
        would maybe allow for a progress bar :pray:
        I think this is better kept as a runtime dependency for now
        Maybe a future feature

    consider allowing //package
        ex: //tree would be parsed into the tree package from *every* repo that contains it
        I think this is worth implementing
        Planned for 0.2.0

    Add an API
        Would allow queries such as build (current/total_queued)
        Would allow the retrieval of build times and such

    Add a way to retain notes/warnings and display them upon request for a package

    Add size information in stats
        Consider using the size crate for easy size handling
        Use sighs to find dir/file size
        Planned for 0.2.0

    Use xshell

    # This function will be called whenever --get is called on a package
    Add 2g() {}
        Mock up for rust:
        ```bash
        tar xf "$SRC/package=0.0.0.tar.xz" $(tar tf "$SRC/package=0.0.0.tar.xz" | grep Cargo.{toml,lock})
        (cd extracted/dir && cargo fetch --locked --target "$(rustc -vV | sed -n 's,host: ,,p')")
        ```

    Add a flag [-m|--machine] to make output easily parsable

    Add a file that shows currently extracted package
        Also should show its index in the queue

    Could be used by another program to track progress

    Change formatting of --list to be more like this:
        [&grey;-] repo/name=0.0.0
        [&blue;*] repo/name=0.0.0
        [&red;o] repo/name=0.0.0

        I'll have installed version covered in -a and -A for outdated packages
        This should make the ui a lot cleaner
        This should be fairly easy to implement and is planned for 0.2.0

    Package manifests into distribution tarballs
        Would make forced package removal better
        Would allow listing of package contents

    Rewrite 2's argument parsing from the ground up
        Ideally roll a custom parser as well

ROADMAP

    Features for 2-0.1.0:
        [*] Package summaries
        [*] Build time tracking
        [*] Install script
        [*] Fair 2lkit functionality
        [*] Finalize feature additions
        [*] Reasonable amount of testing
        [*] Solid documentation with mdbook

    Features for 2-0.2.0:
        [-] Change BUILD function names to be more readable and add missing ones
            2b -> 2build
            2z -> 2postinstall
            + 2preinstall
            + 2preremove
            + 2postremove
        [-] Listing ui rework
        [-] Make 2 give proper output if it can't find its config instead of hanging indefinitely
        [-] Support //<name>
        [-] Improve code organization with a workspace
            Split things into their own libraries
        [-] Licenses & dependencies in long about
            Implies dependency support
            Also size for distribution tarball and extracted space
                Use my sighs library for this
        [-] Source-sharing for packages
            This will require some thought as to how I want to implement it
        [-] .part downloads
        [-] Add ignored.txt
            Used to ignore certain packages
            Syntax should require <repo>/<name>, but allow //<name>
            These packages won't be recognized by 2
            Syntax should also support !<repo>/<name> to exempt a specific package, as is done in gitignores
        [-] Take another glance at the ideas and consider what I wanna implement

    Features for 2-0.3.0:
        [-] Add a file that contains paths not to be removed
            Should support wild cards
        [-] Repo enabling/disabling
        [-] Progress bars for pruning and cleaning
        [-] PackageStatus enum (Available, Built, Installed)
            Would also need to add @b ('built' special set)
        [-] PackageVersionStatus enum (Available, Outdated, Current) # might be unnecessary
        [-] Vulnerability checks (GLSA-based)
