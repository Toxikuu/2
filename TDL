# Project: 2/two

TODO

    Work on mdbook docs
        Existing documentation probably needs updating too
        Do this once I attempt to stabilize for 0.1.0

    Consolidate logging and vpr/msg/erm
        Would also probably be a good idea to transition to tracing

WIP

    Move /usr/ports to /var/ports
        Nightmare! (maybe, its probably fine actually)

    Test install.sh
        Seemed to work fine in chroot

    Add full output for --prune
        Currently, this only shows the total removed files
        It needs to also show which files are being removed, suppressable with -q

    Complete maint functionality
        Add downgrade
            restore's been added, but I might also add a simple downgrade
        Add view
        The error handling isn't user friendly but it's fine
        Add Package::from(MaintArg)

    Expand the main & xorg repos
        Categorize more packages

DONEISH

    Improve error messages by using with_context(|| format!(...))
        Ideally I'd have something like this but for Fail
        Used efail

    Implement long about
        Long about should include everything about does, as well as other fields:
            [*] port_dir
            [*] dist tarball
            [*] category
            [-] license (in the future)
            [-] dependencies (in the future)
            TODO ^

    Make the env scripts recognize 32DEST/usr/lib as a fallback if 32DEST/usr/lib32 doesn't exist
        Also simplify the logic from packages accordingly:
            libvdpau-va-gl
            zstd
            (possibly others) # i haven't found the others if they exist

    Move pkg.log to build.log and don't do any attach/detach shenanigans
        Needs testing

    Consolidate all dotdir creation to be handled in a function called in package::parse

    Allow shortened repo addition
        This could be expanded to allow hosts other than github in the future, but we'll cross that bridge when we get there

    Make master.log transient
        Now exists at /tmp/2/master.log to be wiped on reboot

    Fix the weird upstream bug
        ofc it was caused by string formatting

    Use Option for upstream

    Allow more escape code variants in package formatting in config.toml

    Add a qa check to ensure stuff was installed to $D when building
        Rewrite the qa checks in not bash

    consider adding package categories
        some of these categories will raise warnings
            im thinking one for critical packages
            would warn the user about removing glibc for instance

    Add a qa check to ensure no 64bit libraries found their way into $D/usr/lib32

    Check modtime on info.lock whenever --build is called
        Also store the modtime somewhere
        Would be stored in .data/STATS
        I gotta make .data/STATS
            This is technically done but its kinda cursed and i should really just use releases

    Make -S sync all repos if no arguments were passed

    Use pedantic shellcheck options
        As with clippy, to ensure code quality

    Serialize more metadata into package locks
        Also consider renaming info.lock to LOCK

    Add package types
        Need to add critical so i dont remove glibc (again)

    Migrate repos to new build api

    Work on the releases script

    Make -L show the master log if no arguments were passed

    Use an inherit-esque system instead of *-* scripts
        add a script called 'with' which sources files in a specific directory
        these files contain functions for a specific build system or task

        finish writing the env files

    Make -U expand to //@@ if no arguments were passed

    Move flag explanations out of packages/ and into flags/
        also covered all of the flags

    Add a configure option for whether dist tarballs should be deleted
        ended up removing remove_dots as well

    Add an option to toggle alphebitization when listing

    Move the @all alias to @@
        also add @available and alias it to @a

    Add force pruning

    Rename comms/log.rs to comms/out.rs for clarity

    Figure out how to make the message configs have the full escape code in the config for clarity
        Done
        I had to use \u00 instead of \x

    Do hash-checks in house instead of relying on openssl

    Make cleaning hesitant to remove manifests
        Also went ahead and refactored the relevant functions

    Investigate a potential bug where -fbi builds twice

    Attempt to update instead of installing if -i is passed, the package is already installed, and it's outdated
        Im like 80% sure i did this cus the codes there but idr if i fully implemented it LOL
        Update: it feels like it mostly works, so im up to 90% sure, but ima have to test this some more <<< TODO: Verify

    Have the execution logic as a PM method
        Also pass args to it
        This is to address the `2 -bi dependency package` issue
        Iterate over each package, checking the flags

    Add a way to specify repo when dealing with sets
        I'm thinking assume all repos unless repo/ is specified (for special sets)
            (I ended up just assuming the highest priority repo for special sets, opting for //@special instead)
        otherwise resolve ambiguity

        probably not necessary yet

    Use more nf icons

    Make the downloads actually happen at the start

    Add sets for installed, outdated, etc

    Migrate from lazy_static to once_cell for everything
        Used std::sync::LazyLock instead

    Allow viewing package changelogs with -H

    Make -U show the repo as well as the package name
        cus
            main/kernel
            tox/kernel

    // fucking hell i was tired :sob:
    Fix the fucking the thing the parallel dowlnoads fuck im tired
        make the downloads happen at the start but not like in parallel because every fucking crate author is allergic to writing good documentation with examples of how to use the fucking library
        also it would make logging a lot simpler

    Fix upstream version commands for xorg/

    Rayon support for -U is badly needed

    Update to ureq 3

    Fix upstream version commands for main/

    Move .uv.toml data back into info.lock and BUILD, simplifying stuff
    Add upstream version checking

    Add per package history tracking
        Add autogenerated via scripts changelogs for package builds

    Added m-move

    Updated m-*

    Figure out how to make documentation not show in --help as it currently does

    Add --provides (-P) to see what package provides a certain file via searching manifests

    Add more (source code) documentation

    Use anyhow

    Add log4rs or tracing integration (ideally only log to a file)

    Make -l list all packages for all repos

    Use Arc instead of Vec
        Maybe branch for this

    Add a master package log

    Add logs
        Master log in /var/log/2/master.log
        Per-package build logs in /usr/ports/<repo>/<package>/.logs/build.log

    Add syncing

    Add repo addition

    Remove exclusions from the config.toml

    Add repo priority and auto_ambiguity

    Fix sourceless package support
        Done; needs testing though

    Make file size update dynamically for unknown sizes

    make the scripts recognize $EDITOR

    Check if the necessary dot dirs exist for the passed package, and create them
        Would ensure cleaning works properly on first builds

    Remove all references to /code

    Fix bugs in install.sh
        Rustup toolchain handling
        no op for the currently nonexistent wget command
        fix /bin/2

    Check whether another package is installed before checking against its manifest when removing a specific package

    Fix set ambiguity

    Update the README

    Add an install.sh

    Migrate to using $D

    Add an option to exclude paths from the extraction

    actually implement pruning

    check source hashes during the setup stage

    Migrate build to /usr/ports/<repo>/<package>/.build

    Migrate sources to /usr/ports/<repo>/<package>/.sources

    Prefer ambiguity checks over verbose repo specification

    Add listing functionality

    Test package installation

    Add manifest checking and logic for package removal

    Add source fetching

DROPPED

    Make build.log only include the build logs
        Instead just used pkg.log
        (might have to undrop this ngl)

    Add -! to reverse the behavior of (some) flags
        ~~For instance, -P shows what packages provide a file, but -!P might show what files a package provides~~
        Would be unintuitive and overly complex

    Look into using --dereference with tar
        It is harmful, as it does not package symlinks

    Use the zstd crate, or else vendor my own built zstd libraries
        Imo just keep the runtime dependency, but explain in docs how to bootstrap it

IDEAS

    Add a testing and unstable repo
        testing should basically never be used by an end user, and will function as a testing ground for new packages
        unstable should contain packages moved out of testing
        packages from unstable should be moved to main or xorg

    More API calls for BUILD files
        STRIP=<level> (symbols, debug, all)
        CONFLICTS=("package1", "package2")
        LICENSE=("license", "license2")
        KCFG=("NAMESPACES=Y", "USER_NS=Y") # example kernel config options required for steam

    Drop log4rs in favor of another logger (maybe tracing)
        log4rs flags cargo audit bc it relies on an unmaintained crate

    Build functions in LOCK
        This should be doable with declare -f, though I'm not certain it's desirable

    Build time tracking
        https://pad.riseup.net/p/buildtimetracking-keep

    BUILD instruction guessing
        https://pad.riseup.net/p/buildinstructionguessing-keep

    Add a file for enabled repos
        This would mean not having to delete source tarballs, logs, and data when "removing" a repo

    Introduce /etc/2/sysconfig.toml
        Centralized location for configuring certain system-specific options
        Would make the installation of certain packages just a little less painful, but may not be worth it idk

    Consider using cfg_if

    Consider writing to a .part to avoid the possibility of incomplete tarballs because of an interrupted download
        Planned for 0.2.0

    Rayon everywhere
        There's a fair bit of overhead with doing this
        Async might be the play but I lowkey hate async

    Dependencies support with a flag '-d' or similar
        Implies dependency resolution as well

    Make /usr/ports remappable
        Might not even be worth doing tbh
        Having it in a hardcoded spot is probably for the best
        Rather than remapping it, move it to the more fhs-compliant /var/ports
            (not that i particularly adhere to fhs, but i like /var more here bc the data in the ports dir changes a lot)

    Check hashes for dist installs as well
        Would marginally increase security and more than marginally increase complexity

    Add git as a supported source format
        syntax: source variable starts with git+
        repo is cloned to /usr/ports/<repo>/<package>/.sources/git+name
        if it exists, the repo is pulled instead
        tags are checked out here
        then, the build is done in .build as usual

    Do the zstd compression in-house
        would maybe allow for a progress bar :pray:
        I think this is better kept as a runtime dependency for now
        Maybe a future feature

    use indicatif's pb.println() for building logs
        would be a collosal pain in the ass
        but would look nice

    consider allowing //package
        ex: //tree would be parsed into the tree package from *every* repo that contains it

ROADMAP

    Features for 2-0.1.0:
        [*] package summaries
        [*] build time tracking
        [*] install script
        [*] fair maint functionality
        [-] finalize feature additions
        [-] reasonable amount of testing
        [-] solid documentation with mdbook

    Features for 2-0.2.0:
        licenses & dependencies in long about
        Source-sharing for packages
        vulnerability checks (GLSA-based)
        dependency support
        .part downloads
        Add ignored.txt
            Used to ignore certain packages
            These packages won't be recognized by 2
        Take a glance at the ideas and consider what I wanna implement

    Features for 2-0.3.0:
        Add a file that contains paths not to be removed
            Should support wild cards
        repo enabling/disabling
        progress bars for pruning and cleaning
        PackageStatus enum (Available, Built, Installed)
            Would also need to add @b ('built' special set)
        PackageVersionStatus enum (Available, Outdated, Current) # might be unnecessary
